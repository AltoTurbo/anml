rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isTrainer() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'trainer';
    }

    // La función isSignedInUser ha sido eliminada ya que no se utilizaba.

    match /users/{userId} {
      // Los usuarios pueden leer su propio perfil. Administradores y Entrenadores pueden leer cualquier perfil.
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin() || isTrainer());
      // Cualquier usuario autenticado puede crear su propio documento de usuario al registrarse.
      allow create: if request.auth != null;
      // Los usuarios pueden actualizar su propio perfil. Los administradores pueden actualizar cualquier perfil.
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }

    match /classes/{classId} {
      allow read: if request.auth != null; // Cualquiera autenticado puede leer las ofertas de clases
      allow create, update, delete: if request.auth != null && (isAdmin() || isTrainer());
    }

    match /bookings/{bookingId} {
      // Los usuarios pueden leer sus propias reservas. Administradores y Entrenadores pueden leer cualquier reserva relevante.
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin() || isTrainer());
      // Los usuarios pueden crear sus propias reservas.
      // Se asume que request.resource.data.userId contiene el UID del usuario para el cual se crea la reserva.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Los usuarios pueden actualizar (cancelar) sus propias reservas. Los administradores pueden gestionar cualquiera.
      allow update: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
    }

    match /products/{productId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && isAdmin();
    }

    match /cashTransactions/{transactionId} {
      allow read, list: if request.auth != null && isAdmin();
      allow create: if request.auth != null && isAdmin();
    }

    match /membershipPayments/{paymentId} {
      allow read, list: if request.auth != null && isAdmin();
      allow create: if request.auth != null && isAdmin();
    }

    match /sales/{saleId} {
      allow read, list: if request.auth != null && isAdmin();
      allow create: if request.auth != null && isAdmin();
    }

    match /attendances/{attendanceId} {
      // Para operaciones GET (leer un solo registro de asistencia)
      allow get: if request.auth != null &&
                    (isAdmin() || isTrainer() || (request.auth.uid == resource.data.userId));
      // Para operaciones LIST (consultar múltiples registros de asistencia)
      allow list: if request.auth != null && (isAdmin() || isTrainer());
      allow create: if request.auth != null && (isAdmin() || isTrainer());
    }
  }
}
